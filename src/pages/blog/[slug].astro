---
import { type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import { getBlogCollection } from 'src/data/collections';
import Callout from 'src/components/Callout.astro';

export async function getStaticPaths() {
    const posts = (await getBlogCollection(true)).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { slug: post.slug },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, lastUpdatedAt, excerpt, tags = [], seo, draft } = post.data;
const { Content, headings } = await post.render();

const tableOfContents = headings
    .filter((heading) => heading.depth === 2 || heading.depth === 3)
    .map((headings) => ({
        text: headings.text,
        url: `#${headings.slug}`,
        depth: headings.depth === 2 ? 1 : 2
    }));
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
            <div class="mt-4 text-sm">
                <FormattedDate date={publishDate} />
                {
                    lastUpdatedAt && (
                        <span>
                            {' '}
                            (last update: <FormattedDate displayTime date={lastUpdatedAt} />)
                        </span>
                    )
                }
            </div>
        </header>
        {
            draft && (
                <div class="my-4">
                    <Callout type="warning">This post is a draft.</Callout>
                </div>
            )
        }
        {
            tableOfContents.length > 0 ? (
                <article class="mb-8">
                    <details class="p-4 bg-muted rounded-sm" open>
                        <summary class="cursor-pointer p-0">
                            <h2 class="inline text-lg font-semibold">Table of Contents</h2>
                        </summary>
                        <ul class="p-2">
                            {tableOfContents.map(({ text, url, depth }) => {
                                return (
                                    <li class="list-disc" style={{ marginLeft: `${depth * 16}px` }}>
                                        <div>
                                            <a href={url}>
                                                <p class="hover:underline">{text}</p>
                                            </a>
                                        </div>
                                    </li>
                                );
                            })}
                        </ul>
                    </details>
                </article>
            ) : null
        }
        <div class="max-w-none prose prose-customTheme sm:prose-lg">
            <Content />
        </div>
        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">share</Button>
        </div>
    </article>
    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">read next</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
    <Subscribe class="my-16 sm:my-24" />
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Copied';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
